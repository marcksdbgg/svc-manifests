# query-service/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: query-service-config
  namespace: atenex
data:
  # General
  QUERY_LOG_LEVEL: "INFO"

  # PostgreSQL
  QUERY_POSTGRES_SERVER: "postgresql-service.atenex.svc.cluster.local"
  QUERY_POSTGRES_PORT: "5432"
  QUERY_POSTGRES_USER: "postgres"
  QUERY_POSTGRES_DB: "atenex"
  # QUERY_POSTGRES_PASSWORD -> Proveniente de Secret

  # Milvus/Zilliz
  QUERY_MILVUS_URI: "https://in03-0afab716eb46d7f.serverless.gcp-us-west1.cloud.zilliz.com"
  QUERY_MILVUS_COLLECTION_NAME: "atenex_collection" #"atenex_e5_collection"
  QUERY_MILVUS_EMBEDDING_FIELD: "embedding"
  QUERY_MILVUS_CONTENT_FIELD: "content"
  QUERY_MILVUS_COMPANY_ID_FIELD: "company_id"
  QUERY_MILVUS_DOCUMENT_ID_FIELD: "document_id"
  QUERY_MILVUS_FILENAME_FIELD: "file_name"
  QUERY_MILVUS_GRPC_TIMEOUT: "20" 
  # QUERY_MILVUS_METADATA_FIELDS: (...) # Uses default from config.py

  # Embedding Service (Remote)
  QUERY_EMBEDDING_DIMENSION: "1536" #"768" 
  QUERY_EMBEDDING_SERVICE_URL: "http://embedding-service.atenex.svc.cluster.local:80" #"http://host.docker.internal:8003"  
  QUERY_EMBEDDING_CLIENT_TIMEOUT: "30"

  # Sparse Search Service (Remote BM25)
  QUERY_BM25_ENABLED: "true" # Controla si se usa el paso de búsqueda dispersa (llamada al servicio remoto)
  QUERY_SPARSE_SEARCH_SERVICE_URL: "http://sparse-search-service.atenex.svc.cluster.local:80"
  QUERY_SPARSE_SEARCH_CLIENT_TIMEOUT: "30"

  # Reranker Service (Remote)
  QUERY_RERANKER_ENABLED: "true"
  QUERY_RERANKER_SERVICE_URL: "http://host.docker.internal:8004" # "http://reranker-service.atenex.svc.cluster.local:80" normal
  QUERY_RERANKER_CLIENT_TIMEOUT: "30"

  # Gemini LLM Settings
  QUERY_GEMINI_MODEL_NAME: "gemini-2.0-flash"
  # QUERY_GEMINI_API_KEY -> Proveniente de Secret

  # RAG Pipeline Control & Parameters
  QUERY_RETRIEVER_TOP_K: "100" # Nº de chunks a pedir a dense y sparse retrievers inicialmente
  QUERY_MAX_CONTEXT_CHUNKS: "75" # Nº máx de chunks para el LLM después de reranking/filtering
  QUERY_MAX_PROMPT_TOKENS: "500000" 
  QUERY_DIVERSITY_FILTER_ENABLED: "true"
  QUERY_DIVERSITY_LAMBDA: "0.5" # Para MMR si está habilitado

  # HTTP Client Settings (Globales, usados por http_client en UseCase para Reranker y otros futuros)
  QUERY_HTTP_CLIENT_TIMEOUT: "60" 
  QUERY_HTTP_CLIENT_MAX_RETRIES: "2"
  QUERY_HTTP_CLIENT_BACKOFF_FACTOR: "1.0"

  # Chat history settings
  QUERY_MAX_CHAT_HISTORY_MESSAGES: "10"
  QUERY_NUM_SOURCES_TO_SHOW: "7"
  
  # MapReduce (Opcional, actualmente gestionado en config.py pero podría moverse aquí)
  QUERY_MAPREDUCE_ENABLED: "true"
  QUERY_MAPREDUCE_CHUNK_BATCH_SIZE: "5"
  QUERY_MAPREDUCE_ACTIVATION_THRESHOLD_CHUNKS: "25"
  QUERY_TIKTOKEN_ENCODING_NAME: "cl100k_base"